# Generated by Django 4.1.5 on 2023-05-09 01:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Admin",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("profile_picture", models.ImageField(upload_to="profile_pictures/")),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("comment", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Documents",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("docs_title", models.TextField(blank=True, null=True)),
                ("adviser", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "school_year",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("content_similarity", models.FloatField(default=0.0)),
                ("title_similarity", models.FloatField(default=0.0)),
                (
                    "uploaded_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "db_similarity_report",
            },
        ),
        migrations.CreateModel(
            name="DocumentsProponents",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Panel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("profile_picture", models.ImageField(upload_to="profile_pictures/")),
            ],
        ),
        migrations.CreateModel(
            name="Proponent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="StudentUsers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("Student_Id", models.CharField(max_length=255)),
                ("Student_Name", models.CharField(max_length=255)),
                ("Email", models.EmailField(max_length=254)),
                ("Contact_Number", models.CharField(max_length=20, null=True)),
                ("Course", models.CharField(max_length=255)),
                ("SUBJECT_CODE", models.CharField(max_length=255)),
                ("SUBJECT_DESCRIPTION", models.CharField(max_length=255)),
                ("YR_SEC", models.CharField(max_length=255)),
                ("SEM", models.CharField(max_length=255)),
                ("SY", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "user_enrolled_students",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("student_id", models.CharField(max_length=50)),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("group", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UploadDocuments",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("student_title", models.CharField(max_length=255)),
                (
                    "student_pdf_file",
                    models.FileField(
                        upload_to=(
                            "C:\\Users\\Admin\\Desktop\\thesis-project\\media/",
                            "DefFiles/",
                        )
                    ),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "document_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVE", "Approve"),
                            ("REJECT", "Reject"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("adviser", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "school_year",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("status_updated_at", models.DateTimeField(auto_now=True)),
                ("abstract", models.TextField(blank=True, null=True)),
                (
                    "threshold_result",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "comments",
                    models.ManyToManyField(
                        related_name="document_comments", to="Users.comment"
                    ),
                ),
                (
                    "most_similar_documents",
                    models.ManyToManyField(
                        related_name="similar_to", to="Users.documents"
                    ),
                ),
                (
                    "status_updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="upload_doc_status_updated_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "student_proponents",
                    models.ManyToManyField(
                        related_name="student_proponents", to="Users.studentusers"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "db_upload_docs",
            },
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("student_id", models.CharField(max_length=255)),
                ("group", models.CharField(default="Student", max_length=50)),
                ("profile_picture", models.ImageField(upload_to="profile_pictures/")),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SimilarityThreshold",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("threshold", models.FloatField(default=1)),
                (
                    "user",
                    models.OneToOneField(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "db_similarity_threshold",
            },
        ),
        migrations.CreateModel(
            name="RepositoryFiles",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("adviser", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "school_year",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        upload_to=(
                            "C:\\Users\\Admin\\Desktop\\thesis-project\\media/",
                            "RepositoryFiles/",
                        )
                    ),
                ),
                (
                    "text_file",
                    models.FileField(
                        blank=True, max_length=255, null=True, upload_to=""
                    ),
                ),
                ("abstract", models.TextField(blank=True, null=True)),
                ("description", models.CharField(default="repository", max_length=255)),
                (
                    "proponents",
                    models.ManyToManyField(
                        related_name="repository_proponents", to="Users.proponent"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "db_repository",
            },
        ),
        migrations.CreateModel(
            name="PanelUsers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("username", models.CharField(max_length=255, null=True)),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("password", models.CharField(max_length=255)),
                ("group", models.CharField(default="Panel", max_length=50)),
                (
                    "panel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="Users.panel"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="panel",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="documents",
            name="proponents",
            field=models.ManyToManyField(
                related_name="proponents", to="Users.documentsproponents"
            ),
        ),
        migrations.CreateModel(
            name="DocumentComparison",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("doc1_title", models.CharField(max_length=255)),
                ("doc1_proponents", models.CharField(max_length=255)),
                (
                    "doc1_pdf_file",
                    models.FileField(
                        upload_to=(
                            "C:\\Users\\Admin\\Desktop\\thesis-project\\media/",
                            "ComparisonDocs/",
                        )
                    ),
                ),
                ("doc2_title", models.CharField(max_length=255)),
                ("doc2_proponents", models.CharField(max_length=255)),
                (
                    "doc2_pdf_file",
                    models.FileField(
                        upload_to=(
                            "C:\\Users\\Admin\\Desktop\\thesis-project\\media/",
                            "ComparisonDocs/",
                        )
                    ),
                ),
                ("comparison_result", models.FloatField(null=True)),
                ("docs_uploaded_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "db_comparison_docs",
            },
        ),
        migrations.AddField(
            model_name="comment",
            name="docs_defense",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="Users.uploaddocuments"
            ),
        ),
        migrations.AddField(
            model_name="comment",
            name="user",
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name="AdminUsers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("username", models.CharField(max_length=255, null=True)),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("password", models.CharField(max_length=255)),
                ("group", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "admin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="Users.admin"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="admin",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
    ]
